//stays in the server folder
//this script will gather music data from the DB and print it via the html
// Access node.js's built in http, url, fs, path, and event modules
const http = require('http');
const url = require('url');                                                        // Can be used to split up a web address into readable parts (use q = url.parse(...).query to return a URL object with each part of the address as properties [example address: localhost:8000/default.htm?year=2017&month=february], also has .host [localhost:8000], .pathname [default.htm], and .search [?year=2017&month=february])
const fs = require('fs');                                                          // Will be used to work with file system operations (read, create, update, etc.); needed to dynamically display reports generated by the DB
const path = require('path');                                                      // Used to generate the correct file paths
const sql = require('mssql');                                                      // Used to connect to our Database
const events = require('events');   
const lamejs = require('lamejs');
var AudioContext = require('web-audio-api');   
                                            // Used to create-, fire-, and listen for- our own events (i.e. user likes a song, etc.)
const arrayBufferToAudioBuffer = require('arraybuffer-to-audiobuffer');
// Here you can include any other built in / user modules as well (think #include <...>)
// const dt = require('./myFirstModule');
const dbConfig = require('./databaseConfig.js');
const { isInt16Array, isInt32Array, isInt8Array } = require('util/types');
const server = http.createServer(async function(req, res) {                                           // req - request from client as an object; res - response from server as an object
    //
        var q = url.parse(req.url, true).query;                                      // true - parse query string (part after '?') into object; false - leave it as a string (see line 3)
        var fileName = "." + q.pathname;                                             // Generates file name using url object.pathname method
        var filePath = path.join(__dirname, '..', 'client', fileName);               // Navigates to correct directory and gets correct path to wanted file name
        // Set CORS headers
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Request-Method', '*');
        res.setHeader('Access-Control-Allow-Methods', 'OPTIONS, GET');
        res.setHeader('Access-Control-Allow-Headers', req.header?.origin || "*");
        if ( req.method === 'OPTIONS' ) {
            res.writeHead(200);
            res.end();
            return;
        }
            // We can create functions / modules outside of this app for better organization maybe
    else if (req.method === 'GET') {
        let pool
        try {
        
            pool = await sql.connect(dbConfig);  // Use the existing variable
            const result1  = await pool.request().query("SELECT Audio_Data FROM MusicLibrary.[Song] WHERE Song_ID = 20");
            res.end(JSON.stringify({data1: result1.recordset}));
            var audio_data = result1.recordset[0].Audio_Data; //audio_data is myVariable and is also audio buffer 
            var room = new window.AudioContext();
            var sampleRate = 44100;
            var channels = 1;
            var audioBuffer = room.createBuffer(channels, 0, sampleRate);
            var channelObject = audioBuffer.getChannelData(0);
            var audioBufferDataArray = channelObject.data;
            // actual code to set the data
            audioBuffer.length = audio_data.buffer.length; // optional
            for(var i=0; i<audio_data.length; i++){
                audioBufferDataArray[i] = audio_data.buffer[i];
            }

            const float32Array = audioBuffer.getChannelData(0);

            // Convert Float32Array to Int16Array
            const int16Array = new Int16Array(float32Array.length);
            for (let i = 0; i < float32Array.length; i++) {
            int16Array[i] = Math.min(1, float32Array[i]) * 0x7FFF;
            }
            // Create a LAME encoder
            const encoder = new lamejs.Mp3Encoder(1, audioBuffer.sampleRate, 128);
            // Encode the audio data
            const mp3Data = [];
            const samplesPerPage = 1152; // This is a standard value for MP3 encoding
            for (let i = 0; i < int16Array.length; i += samplesPerPage) {
            const sampleChunk = int16Array.subarray(i, i + samplesPerPage);
            const mp3buf = encoder.encodeBuffer(sampleChunk);
            if (mp3buf.length > 0) {
                mp3Data.push(new Int8Array(mp3buf));
            }
            }
            // Flush the encoder
            const mp3buf = encoder.flush();
            if (mp3buf.length > 0) {
            mp3Data.push(new Int8Array(mp3buf));
            }
            // Concatenate the MP3 data
            const concatenatedMp3 = new Int8Array(mp3Data.reduce((acc, chunk) => acc + chunk.length, 0));
            mp3Data.reduce((offset, chunk) => {
            concatenatedMp3.set(chunk, offset);
            return offset + chunk.length;
            }, 0);

            // Create a Blob from the MP3 data
            const mp3Blob = new Blob([concatenatedMp3], { type: 'audio/mp3' });

            // Create a download link
            const downloadLink = document.createElement('a');
            downloadLink.href = URL.createObjectURL(mp3Blob);
            downloadLink.download = 'output.mp3';

            // Append the link to the document
            document.body.appendChild(downloadLink);

            // Trigger a click on the link to start the download
            downloadLink.click();

            // Remove the link from the document
            document.body.removeChild(downloadLink);
        } catch (error) {
            console.error('Error fetching song:', error);
            return [];
        } finally {
            if (pool) {
                pool.close();
            }
        }
    }                                                                 
})
server.listen(8080, () => {                                                      // Server object listens on this port
    console.log('Server is listening on port 8080');
  });






/*
//play audio
function playAudio()
{
  //replace string with stuff pointing to the DB
  var audio_control = document.getElementById("audio-player"); 
  var fileInput = document.getElementById('fileInput');
  var file = fileInput.files[0];
  if (file) {
    var objectURL = URL.createObjectURL(file);
    audio_control.src = objectURL;
    audio_control.play();
  }
}
function pauseAudio()
{
    var audio_control = document.getElementById("audio-player"); 
    var fileInput = document.getElementById('fileInput');
    var file = fileInput.files[0];
    if (file) {
      var objectURL = URL.createObjectURL(file);
      audio_control.src = objectURL;
      audio_control.pause();
    }

}
function Audio()
{
  audio_control.pauseAudio();
  var audio = new Audio(SongName);
  audio.pause();

}*/
