// Access node.js's built in http, url, fs, path, and event modules
const http = require('http');
const url = require('url');                                                        // Can be used to split up a web address into readable parts (use q = url.parse(...).query to return a URL object with each part of the address as properties [example address: localhost:8000/default.htm?year=2017&month=february], also has .host [localhost:8000], .pathname [default.htm], and .search [?year=2017&month=february])
const fs = require('fs');                                                          // Will be used to work with file system operations (read, create, update, etc.); needed to dynamically display reports generated by the DB
const path = require('path');                                                      // Used to generate the correct file paths
const sql = require('mssql');                                                      // Used to connect to our Database
const events = require('events');                                                  // Used to create-, fire-, and listen for- our own events (i.e. user likes a song, etc.)

// Here you can include any other built in / user modules as well (think #include <...>)
// const dt = require('./myFirstModule');
const dbConfig = require('./databaseConfig');

// Event creation and event handlers
const eventEmitter = new events.eventEmitter();                                    // All event properties and methods are an instance of this eventEmitter object
/*
//Creates an event handler:
var myEventHandler = function () {
  console.log('I hear a scream!');
}
  
//Assign the event handler to an event:
eventEmitter.on('scream', myEventHandler);
  
//Fire the 'scream' event:
eventEmitter.emit('scream');
*/


// Creates a server object
http.createServer(function(req, res) {                                           // req - request from client as an object; res - response from server as an object

    var q = url.parse(req.url, true).query;                                      // true - parse query string (part after '?') into object; false - leave it as a string (see line 3)
    var fileName = "." + q.pathname;                                             // Generates file name using url object.pathname method
    var filePath = path.join(__dirname, '..', 'client', fileName);               // Navigates to correct directory and gets correct path to wanted file name

    if (req.method === 'POST') {
        if (fileName === 'musicUpload.html') {
            // Data parsing
            // Data buffer will incrementally collect data sent via request
            let body = '';
            req.on('data', (data) => {
                body += data;
            });
          
            /*
            fs.readFile(filePath, function(err, data) {                                  // attempts to read from the file at located filePath and stores into a buffer or string called data
                if (err) {                                                               // if error, throws 404 status code and outputs a plain text page to the user with message 'File not found'
                    res.writeHead(404, {'Content-Type': 'text/plain'});
                    res.end('File not found');
                }
                else {                                                                   // else outputs data (which is the contents of the file) as the indicated type (in this case, text/html)
                    res.writeHead(200, {'Content-Type': 'text/html'})                    // Specifies that content should be displayed as HTML; 200 is the status code for 'OK'
                    res.write(data);                                                     // Write in the response for the client
                    res.end();                                                           // sends the data to the client's browser
                }
            })
            */

            // Data Validation / Security authentication (user must be an artist)
            // if errors in data, redirect user to page with a back button so that they can modify accordingly

            // else 
            sql.connect(dbConfig, (err) => {
                if (err) {                                                       // Database connection error handler
                    console.error('Database connection error:', err);
                    res.writeHead(500, { 'Content-Type': 'text/plain' });
                    res.end('Database connection error');
                    return;                    
                }

                const request = new sql.Request();
                request.query(/* INSERT INTO table_name VALUES(val1, val2, etc.) */'Select 1', (err, result) =>  {
                    if (err) {                                                   // Database query error handler
                        console.error('Database query error:', err);
                        sql.close();
                        res.writeHead(500, { 'Content-Type': 'text/plain' });
                        res.end('Database query error');
                        return;
                    }

                    // Process query result and close
                    sql.close();
                })
            })
        }
    }

    // Unsure if best way to go about this, but I know each page will have different queries so need to know name of page here (held in file name)
    // We can create functions / modules outside of this app for better organization maybe
    else if (req.method === 'GET') {
        // Keep as template for now, create branch for your html doc
        if (fileName === 'specified_file_1.html') {
            // Connect to database

            // Do user account authentication to ensure they have access to see report (if they are an artist and the report is for their music)/ playlist (if hidden but they are the owner), etc.

            // If no access, close sql connection and output appropriate message to them

            // Else, do a request.query('SELECT thing_1, thing_2, etc., FROM table_1, table_2, WHERE conditions', ...) to pull rows of data. Next, find out how to modify page to showcase data pulled (may need to use fs object)

        }
        else if (fileName === 'specified_file_2.html') {

        }
        // else if (etc.)
    }
    res.end();                                                                   // Ends the response
})

server.listen(8080, () => {                                                      // Server object listens on this port
  console.log('Server is listening on port 8080');
});
