// Access node.js's built in http, url, fs, path, and event modules
const http = require('http');
const url = require('url');                                                        // Can be used to split up a web address into readable parts (use q = url.parse(...).query to return a URL object with each part of the address as properties [example address: localhost:8000/default.htm?year=2017&month=february], also has .host [localhost:8000], .pathname [default.htm], and .search [?year=2017&month=february])
const formidable = require('formidable');                                          // Used to process form data and especially helpful for file uploads
const fs = require('fs');                                                          // Will be used to work with file system operations (read, create, update, etc.); needed to dynamically display reports generated by the DB
const path = require('path');                                                      // Used to generate the correct file paths
const sql = require('mssql');                                                      // Used to connect to our Database
const events = require('events');                                                  // Used to create-, fire-, and listen for- our own events (i.e. user likes a song, etc.)
const queryString = require('querystring');                                        // Used to parse strinfs into JavaScript objects
const { getReqData } = require("./utils_json.js");                                 // Helper function for Axel's features


// Here you can include any other built in / user modules as well (think #include <...>)
// const dt = require('./myFirstModule');
const dbConfig = require('./databaseConfig');

// Event creation and event handlers
const eventEmitter = new events.EventEmitter();                                    // All event properties and methods are an instance of this eventEmitter object
/*
//Creates an event handler:
var myEventHandler = function () {
  console.log('I hear a scream!');
}
  
//Assign the event handler to an event:
eventEmitter.on('scream', myEventHandler);
  
//Fire the 'scream' event:
eventEmitter.emit('scream');
*/

// Function to handle database connection errors
function handleDatabaseError(res, error) {
    console.error('Database connection error:', error);
    res.writeHead(500, { 'Content-Type': 'text/plain' });
    res.end('Database connection error');
}

// Generate a random session ID (you might need a more secure method in production)
function generateSessionID() {
    return Math.random().toString(36).substring(2, 15);
}

// Serve either: only the html file (1), html + css files (2), html + js files(3), or html + css + js files (4):
// serveFile(res, 1, writeHeadParameters, htmlPath);
// serveFile(res, 2, writeHeadParameters, htmlPath, cssFileName);
// serveFile(res, 3, writeHeadParameters, htmlPath, jsFileName);
// serveFile(res, 4, writeHeadParameters, htmlPath, cssFileName, jsFileName);
function serveFile(res, mode, writeHeadParameters, filePath, cssFileName, jsFileName) {
    fs.readFile(filePath, 'utf-8', function(err, data) {
        if (err) {
            console.log('File not found:', filePath);
            res.writeHead(404, { 'Content-Type': 'text/plain' });
            res.end('File not found');
        } 

        // Serve HTML file with potentially a css and js file appended to it
        else {
            //console.log("mode: ", mode);
            //console.log("writeHeadParameters...: ", ...writeHeadParameters);
            res.writeHead(...writeHeadParameters);
            res.write(data);
            
            // Append css content
            if (mode === 2) {
                //console.log("2: ", mode);
                const cssPath = path.join(__dirname, '..', 'client', cssFileName);
                fs.readFile(cssPath, 'utf-8', function(err, cssData) {
                    if (!err) {
                        res.write('\n<style>\n' + cssData + '\n</style>');
                    }
                    else {
                        console.error('Error reading CSS file (2):', err);
                    }
                });
            }

            // Append js content
            else if (mode === 3) {
                //console.log("3: ", mode);
                const jsPath = path.join(__dirname, '..', 'client', jsFileName);
                fs.readFile(jsPath, 'utf-8', function(err, jsData) {
                    if (!err) {
                        res.write('\n<script>\n' + jsData + '\n</script>');
                    }
                    else {
                        console.error('Error reading JS file (3):', err);
                    }
                });
            }
            
            // Append both cs and js content
            else if (mode === 4) {
                //console.log("4: ", mode);
                const cssPath = path.join(__dirname, '..', 'client', cssFileName);
                fs.readFile(cssPath, 'utf-8', function(err, cssData) {
                    if (!err) {
                            res.write('\n<style>\n' + cssData + '\n</style>');
                    }
                    else {
                        console.error('Error reading CSS file (4):', err);
                    }

                    // Serve assosciated js file
                    const jsPath = path.join(__dirname, '..', 'client', jsFileName);
                    fs.readFile(jsPath, 'utf-8', function(err, jsData) {
                            if (!err) {
                                res.write('\n<script>\n' + jsData + '\n</script>');
                            }
                            else {
                                console.error('Error reading js file (4):', err);
                            }
                    })
                })
            }
            res.end();
        }
    });
}

// Takes in login credentials against database for authentication; returns Cougar_ID
function isValidAccount(username, userPass, callback) {
    sql.connect(dbConfig, (err) => {
        // Database connection error handler
        if (err) {
            handleDatabaseError(res, err);
            return;                    
        }

        const request = new sql.Request();

        const selectStatement = 
        'SELECT A.Cougar_ID ' +
        'FROM MusicLibrary.[User] A ' +
        'WHERE A.Username = @username ' +
        'AND A.Pass = @userPass';

        // Adds parameters to the select statement
        request.input('username', sql.VarChar, username);
        request.input('userPass', sql.VarChar, userPass);
        
        request.query(selectStatement, (err, result) =>  {
            if (err) {                                                   // Database query error handler
                console.error('Database query error:', err);
                sql.close();
                callback('Database query error', null);
                return;
            }

            // Process query result and close
            const row = result.recordset && result.recordset[0];
            const userID = row ? row.Cougar_ID : null;
            console.log('userID from isValidAccount():', userID);
            sql.close();

            // Pass rolename to the callback for role validation
            callback(null, userID);
        })
    })
}

// Updates listener table with login time
function updateLastLogin(userID, callback) {
    sql.connect(dbConfig, (err) => {
        // Database connection error handler
        if (err) {
            handleDatabaseError(res, err);
            return;                    
        }
        const loginTime = new Date();
        const request = new sql.Request();

        const selectStatement = 
        `UPDATE MusicLibrary.[Listener]
        SET Last_Login_Time = @loginTime
        WHERE Cougar_ID = @userID;`

        // Adds parameters to the select statement
        request.input('loginTime', sql.DateTime2, loginTime);
        request.input('userID', sql.Int, userID);
        
        request.query(selectStatement, (err, result) =>  {
            if (err) {                                                   // Database query error handler
                console.error('Database query error:', err);
                sql.close();
                callback('Database query error', null);
                return;
            }

            // Process query result and close
            sql.close();
            // Pass login time to callback
            callback(null, loginTime);
        })
    })
}

// Updates listener table with login time
function getRecommendedAlbum(userID, callback) {
    sql.connect(dbConfig, (err) => {
        // Database connection error handler
        if (err) {
            handleDatabaseError(res, err);
            return;                    
        }
        const request = new sql.Request();
        const selectStatement = 
        'SELECT A.Album_ID ' +
        'FROM MusicLibrary.[Recommended_Album] A ' +
        'WHERE Cougar_ID = @userID ';

        // Adds parameters to the select statement
        request.input('userID', sql.Int, userID);
        
        request.query(selectStatement, (err, result) =>  {
            if (err) {                                                   // Database query error handler
                console.error('Database query error:', err);
                sql.close();
                callback('Database query error', null);
                return;
            }

            // Process query result and close
            const row = result.recordset && result.recordset[0];
            const albumID = row ? row.Album_ID : null;
            //console.log('albumID from getRecommendedAlbum():', albumID);
            sql.close();

            // Pass login time to callback
            callback(null, albumID);
        })
    })
}

// Returns a given Cougar_ID's role
function getUserRole(userID, callback) {
    sql.connect(dbConfig, (err) => {
        // Database connection error handler
        if (err) {
            handleDatabaseError(res, err);
            return;                    
        }

        const request = new sql.Request();

        const selectStatement = 
        'SELECT A.Role_Name ' +
        'FROM MusicLibrary.[Roles] A, MusicLibrary.[User] B ' +
        'WHERE A.Role_ID = B.Role_ID ' +
        'AND B.Cougar_ID = @userID';

        // Adds in parameter userID as int to select statement
        request.input('userID', sql.Int, userID);
        
        request.query(selectStatement, (err, result) =>  {
            if (err) {                                                   // Database query error handler
                console.error('Database query error:', err);
                sql.close();
                callback('Database query error', null);
                return;
            }

            // Process query result and close
            const row = result.recordset && result.recordset[0];
            const roleName = row ? row.Role_Name : null;
            console.log('rolename from getUserRole(): ', roleName);
            sql.close();

            // Pass rolename to the callback for role validation
            callback(null, roleName);
        })
    })
}

// Returns the name corresponding to a Cougar_ID
function getUserName(userID, callback) {
    sql.connect(dbConfig, (err) => {
        // Database connection error handler
        if (err) {
            handleDatabaseError(res, err);
            return;                    
        }

        const request = new sql.Request();

        const selectStatement = 
        'SELECT A.Username ' +
        'FROM MusicLibrary.[User] A ' +
        'WHERE A.Cougar_ID = @userID';

        // Adds in parameter userID as int to select statement
        request.input('userID', sql.Int, userID);
        
        request.query(selectStatement, (err, result) =>  {
            if (err) {                                                   // Database query error handler
                console.error('Database query error:', err);
                sql.close();
                callback('Database query error', null);
                return;
            }

            // Process query result and close
            const row = result.recordset && result.recordset[0];
            const username = row ? row.Username : null;
            console.log('username from getUserName(): ', username);
            sql.close();

            // Pass username to the callback for role validation
            callback(null, username);
        })
    })
}

function redirectToLoginPage(res) {
    const htmlPath = path.join(__dirname, '..', 'client', 'login.html');
    const cssFileName = 'login.css';
    const jsFileName = 'login.js';
    const writeHeadParameters = [302, { 'Content-Type': 'text/html; charset=utf-8' }];

    serveFile(res, 1, writeHeadParameters, htmlPath);
}

function redirectToMainPage(res) {
    const htmlPath = path.join(__dirname, '..', 'client', 'index.html');
    const cssFileName = 'mainPage.css';
    const jsFileName = 'mainPage.js';
    const writeHeadParameters = [302, { 'Content-Type': 'text/html; charset=utf-8' }];

    serveFile(res, 4, writeHeadParameters, htmlPath, cssFileName, jsFileName);
}

function redirectToMusicUpload(res) {
    const htmlPath = path.join(__dirname, '..', 'client', 'musicUpload.html');
    const writeHeadParameters = [302, { 'Content-Type': 'text/html; charset=utf-8' }];

    serveFile(res, 1, writeHeadParameters, htmlPath);
}

// Returns userID from a cookie, if session exists
function getIdFromCookie(userCookie) {
    if (userCookie && userCookie.includes('sessionID')) {
        const sessionID = userCookie.split('=')[1];
        
        if (sessions[sessionID]) {
            return sessions[sessionID].user;
        }
        
        else {
            console.error(`Session not found for sessionID: ${sessionID}`);
        }
    }

    return undefined;
}

// To be used first on any page past the login; checks the user's cookies to get their session and ensures the session exists in server memory, else redirects user back to login page
function authenticateSession(req, res, user) {
    const userCookie = req.headers.cookie;

    user.id = getIdFromCookie(userCookie);

    // Cannot get user from session / session doesn't exist; send user to login page
    if (user.id === undefined) {
        // Serve login.html
        const htmlPath = path.join(__dirname, '..', 'client', 'login.html');
        fs.readFile(htmlPath, function (err, data) {
            if (err) {
                res.writeHead(404, { 'Content-Type': 'text/plain' });
                res.end('File not found');
            }
            else {
                res.writeHead(200, { 'Content-Type': 'text/html' });
                res.write(data);

                // Serve assosciated css file
                const cssPath = path.join(__dirname, '..', 'client', 'playlist_login.css');
                fs.readFile(cssPath, 'utf-8', function (err, cssData) {
                    if (!err) {
                        res.write('\n<style>\n' + cssData + '\n</style>');
                    }
                    else {
                        console.error('Error reading CSS file:', err);
                    }

                    // Serve assosciated js file
                    const jsPath = path.join(__dirname, '..', 'client', 'login.js');
                    fs.readFile(jsPath, 'utf-8', function (err, jsData) {
                        if (!err) {
                            res.write('\n<script>\n' + jsData + '\n</script>');
                        }
                        else {
                            console.error('Error reading js file:', err);
                        }

                        // End the response
                        res.end();
                    })
                })
            }
        });
        return false;
    }
    
    return true;
}

// Session storage
const sessions = {};

//console.log('All Session/UserID Pairs:');
//for (const sessionID in sessions) {
//    if (sessions.hasOwnProperty(sessionID)) {
//        const userID = sessions[sessionID].user;
//        console.log(`SessionID: ${sessionID}, UserID: ${userID}`);
//    }
//}

// Creates a server object
const server = http.createServer(async function(req, res) {                            // req - request from client as an object; res - response from server as an object
    const protocol = req.socket.encrypted ? 'https' : 'http';
    const baseURL = protocol + '://' + req.headers.host + '/';
    const reqUrl = new URL(req.url, baseURL);

    var fileName = reqUrl.pathname;

    res.setHeader("Access-Control-Allow-Origin", "*");
    res.setHeader("Access-Control-Request-Method", "*");
    res.setHeader("Access-Control-Allow-Methods", "OPTIONS, GET, PUT, GET, DELETE, PATCH");
    res.setHeader("Access-Control-Allow-Headers", "*");

    if (req.method === 'OPTIONS'){
        res.writeHead(200);
        res.end();
        return;
    }
    
    if (req.method === 'POST') {
        console.log('File path for POST request:', fileName);

        // Initial login page where we authenticate users and generate sessionIDs for them
        if (fileName === '/login/landing') {
            // Login route
            let body = '';
            req.on('data', (data) => {
                body += data.toString();
            });

            req.on('end', () => {
                // postData example: username=john_doe&password=secretpassword
                // Parses login data from the body into username and pass to then authenticate the login and create / update their session
                const postData = queryString.parse(body);
                const username = postData.username;
                const userPass = postData.password;
                var userID;
                
                // Perform authentication of username and password
                isValidAccount(username, userPass, (err, userID) => {
                    // Database connection error handler
                    if (err) {
                        handleDatabaseError(res, err);
                        return;                    
                    }
                    
                    // This branch executes if userID is either null, undefined, 0, false, or an empty string (i.e. no records for given combination of username and password); need to redirect back to login page
                    else if (!userID) {
                        console.error('Authentication error. Please sign in with correct credentials');
                        // Serve login.html
                        const htmlPath = path.join(__dirname, '..', 'client', 'login.html');
                        fs.readFile(htmlPath, function (err, data) {
                            if (err) {
                                res.writeHead(404, { 'Content-Type': 'text/plain' });
                                res.end('File not found');
                            }
                            else {
                                res.writeHead(200, { 'Content-Type': 'text/html' });
                                res.write(data);

                                // Serve assosciated css file
                                const cssPath = path.join(__dirname, '..', 'client', 'playlist_login.css');
                                fs.readFile(cssPath, 'utf-8', function (err, cssData) {
                                    if (!err) {
                                        res.write('\n<style>\n' + cssData + '\n</style>');
                                    }
                                    else {
                                        console.error('Error reading CSS file:', err);
                                    }

                                    // Serve assosciated js file
                                    const jsPath = path.join(__dirname, '..', 'client', 'login.js');
                                    fs.readFile(jsPath, 'utf-8', function (err, jsData) {
                                        if (!err) {
                                            res.write('\n<script>\n' + jsData + '\n</script>');
                                        }
                                        else {
                                            console.error('Error reading js file:', err);
                                        }

                                        // End the response
                                        res.end();
                                    })
                                })
                            }
                        });
                        return;
                    }

                    // Updates last login time to work with DB trigger (show user new recommended albums)
                    let loginTime;
                    updateLastLogin(userID, (err, loginTime) => {
                        console.log('Login time: ', loginTime);
                    })

                    // Check if an existing session exists for the user via an existing cookie
                    const userCookie = req.headers.cookie;
                    console.log('req.headers.cookie: ' + userCookie);

                    if (userCookie && userCookie.includes('sessionID')) {
                        const sessionID = userCookie.split('=')[1];

                        // Remove existing sessionID
                        if (sessions[sessionID]) {                    
                            delete sessions[sessionID];
                        }
                    }

                    // Generate a new session ID for the current user request
                    const sessionID = generateSessionID();

                    // Create a new session for the user
                    sessions[sessionID] = { user: userID, sessionID: sessionID };
                    console.log('Current session: ' + sessionID);

                    console.log('Redirecting user to /index.html');

                    // Serve index.html
                    const htmlPath = path.join(__dirname, '..', 'client', 'index.html');
                    fs.readFile(htmlPath, function(err, data) {
                        if (err) {
                            res.writeHead(404, {'Content-Type': 'text/plain'});
                            res.end('File not found');
                        }
                        else {
                            res.writeHead(200, {'Content-Type': 'text/html', 'Set-Cookie': `sessionID=${sessionID}; Path=/`});
                            res.write(data);

                            // Serve assosciated css file
                            const cssPath = path.join(__dirname, '..', 'client', 'mainPage.css');
                            fs.readFile(cssPath, 'utf-8', function(err, cssData) {
                                if (!err) {
                                    res.write('\n<style>\n' + cssData + '\n</style>');
                                }
                                else {
                                    console.error('Error reading CSS file:', err);
                                }

                                // Serve assosciated js file
                                const jsPath = path.join(__dirname, '..', 'client', 'mainPage.js');
                                fs.readFile(jsPath, 'utf-8', function(err, jsData) {
                                    if (!err) {
                                        res.write('\n<script>\n' + jsData + '\n</script>');
                                    }
                                    else {
                                        console.error('Error reading js file:', err);
                                    }
                                    
                                    // End the response
                                    res.end();
                                })
                            })
                        }
                    });

                    // Directs logged in user to main page
                    /*
                    const indexHtmlPath = path.join(__dirname, '..', 'client', 'index.html');
                    const indexCssFileName = 'mainPage.css';
                    const indexJsFileName = 'mainPage.js';
                    const writeHeadParameters = [200, {
                        'Content-Type': 'text/html',
                        'Set-Cookie': `sessionID=${sessionID}; Path=/`
                    }];

                    serveFile(res, 4, writeHeadParameters, indexHtmlPath, indexCssFileName, indexJsFileName);
                    */
                })
            })
            return;
        }

        else if (fileName === '/artistDataEntry/single') {
            // Data parsing
            let body = '';
            req.on('data', (data) => {
                body += data.toString();
            });

            // Attempts to authenticate a user's session; if not authentic (session doesn't match server memory, or session doesn't exist) then user is sent to login page
            // Also retrieves userID if session in cookie matches session in memory
            const user = { id: undefined };
            let certified = authenticateSession(req, res, user);

            if (!certified) {
                return;
            }

            var userID = user.id;

            // Data Validation 
            const form = new formidable.IncomingForm({
                // Allow empty files when parsing form
                allowEmptyFiles: true,
                minFileSize: 0
            });

            //form.uploadDir = __dirname + '/uploads';

                form.parse(req, (err, fields, files) => {
                    if (err) {
                        console.error('Error parsing form:', err);
                        res.writeHead(500, { 'Content-Type': 'text/plain' });
                        res.end('Internal Server Error');
                        return;
                    }

                    // Security authentication (user must be an artist)
                    getUserRole(userID, (err, roleName) => {
                        // Database connection error handler
                        if (err) {
                            handleDatabaseError(res, err);
                            return;                    
                        }
                        
                        else if (roleName != 'Artist') {
                            //redirectToMainPage(res);

                            // Serve index.html
                            const htmlPath = path.join(__dirname, '..', 'client', 'index.html');
                            fs.readFile(htmlPath, function(err, data) {
                                if (err) {
                                    res.writeHead(404, {'Content-Type': 'text/plain'});
                                    res.end('File not found');
                                }
                                else {
                                    res.writeHead(200, {'Content-Type': 'text/html'});
                                    res.write(data);

                                    // Serve assosciated css file
                                    const cssPath = path.join(__dirname, '..', 'client', 'mainPage.css');
                                    fs.readFile(cssPath, 'utf-8', function(err, cssData) {
                                        if (!err) {
                                            res.write('\n<style>\n' + cssData + '\n</style>');
                                        }
                                        else {
                                            console.error('Error reading CSS file:', err);
                                        }

                                        // Serve assosciated js file
                                        const jsPath = path.join(__dirname, '..', 'client', 'mainPage.js');
                                        fs.readFile(jsPath, 'utf-8', function(err, jsData) {
                                            if (!err) {
                                                res.write('\n<script>\n' + jsData + '\n</script>');
                                            }
                                            else {
                                                console.error('Error reading js file:', err);
                                            }
                                            
                                            // End the response
                                            res.end();
                                        })
                                    })
                                }
                            });

                            console.log('You must be an artist to upload music!!!');
                            // alert js
                            return;
                        }
                    })
                    
                    getUserName(userID, (err, userName) => {
                        // Database connection error handler
                        if (err) {
                            handleDatabaseError(res, err);
                            return;                    
                        }

                        // Access form fields
                        const singleTitle = fields.singleTitle[0];
                        const singleGenre = fields.singleGenre[0];

                        // Access file information
                        const singleCoverFile = files.singleCover;
                        const singleFile = files.singleFile;

                        // User didn't select a cover; assign the default one*
                        let coverFileContent = null;
                        if (!singleCoverFile || singleCoverFile[0].size === 0) {
                            console.log('No cover file selected.');
                        }

                        // Read cover file content as binary data to prepare to store in the Database
                        else {
                            const singleCoverFilePath = singleCoverFile[0].filepath;
                            coverFileContent = fs.readFileSync(singleCoverFilePath);
                        }
                        
                        const singleFilePath = singleFile[0].filepath;
                        const singleFileOriginalFilename = singleFile[0].originalFilename;
    
                        // if errors in data, redirect user to page with a back button so that they can modify accordingly
                        if (!singleFileOriginalFilename.endsWith('.mp3')) {
                            console.log('Only .mp3 files supported');
                            // Redirect to form page
                            redirectToMusicUpload(res);
                            return;
                        }                        
    
                        // Read single file content as binary data
                        const singleFileContent = fs.readFileSync(singleFilePath);
                        
    
                        // Once confirmed user is an artist with no data entry errors, we will INSERT INTO the album / song tables accordingly
                        sql.connect(dbConfig, (err) => {
                            // Database connection error handler
                            if (err) {
                                handleDatabaseError(res, err);
                                return;                    
                            }
    
                            const request = new sql.Request();
    
                            // Define the SQL query with OUTPUT clause to get the inserted ID to then use for Song query
                            const query = 
                            `INSERT INTO MusicLibrary.[Album] (Title, Artist, Genre, Cover, Release_Year, Number_Of_Songs, Created_By)
                            OUTPUT INSERTED.Album_ID
                            VALUES (@singleTitle, @artistName, @singleGenre, @singleCoverFile, '2023', 1, @artistID);`;

                            // Set parameters for the query
                            request.input('singleTitle', sql.VarChar, singleTitle);
                            request.input('artistName', sql.VarChar, userName);
                            request.input('singleGenre', sql.VarChar, singleGenre);
                            request.input('singleCoverFile', sql.VarBinary, coverFileContent);
                            request.input('artistID', sql.Int, userID);
    
                            let insertedID;
    
                            request.query(query, (err, result) =>  {
                                if (err) {                                                   // Database query error handler
                                    console.error('Database query error:', err);
                                    sql.close();
                                    res.writeHead(500, { 'Content-Type': 'text/plain' });
                                    res.end('Database query error');
                                    return;
                                }

                                // Process query result and get inserted Album_ID
                                insertedID = result.recordset[0].Album_ID;
                                console.log('Query insert result (1):', insertedID);

                                const secondRequest = new sql.Request();
    
                                // Define the SQL query with OUTPUT clause to get the inserted ID to then use for Song query
                                const secondQuery = 
                                `INSERT INTO MusicLibrary.[Song] (Album_ID, Title, Artist, Genre, Cover, Release_Year, Marked_For_Deletion, Created_By, Audio_Data)
                                OUTPUT INSERTED.Song_ID
                                VALUES (@insertedID, @singleTitle, @artistName, @singleGenre, @singleCoverFile, '2023', 0, @createdBy, @singleFile);`;
        
                                // Set parameters for the query
                                secondRequest.input('insertedID', sql.Int, insertedID);
                                secondRequest.input('singleTitle', sql.VarChar, singleTitle);
                                secondRequest.input('artistName', sql.VarChar, userName);
                                secondRequest.input('singleGenre', sql.VarChar, singleGenre);
                                secondRequest.input('singleCoverFile', sql.VarBinary, coverFileContent);
                                secondRequest.input('createdBy', sql.Int, userID);
                                secondRequest.input('singleFile', sql.VarBinary, singleFileContent);
        
        
                                secondRequest.query(secondQuery, (err, secondResult) =>  {
                                    if (err) {                                                   // Database query error handler
                                        console.error('Database query error:', err);
                                        sql.close();
                                        res.writeHead(500, { 'Content-Type': 'text/plain' });
                                        res.end('Database query error');
                                        return;
                                    }

                                    // Process query result and get inserted Song_ID
                                    var singleID = secondResult.recordset[0].Song_ID;
                                    console.log('Query insert result (2):', singleID);
                                    sql.close();
                                })
                            })
                        })
                    })
                })
            res.end();
        }

        else if (fileName === '/artistDataEntry/album') {
            // Data parsing
            let body = '';
            req.on('data', (data) => {
                body += data.toString();
            });

            // Attempts to authenticate a user's session; if not authentic (session doesn't match server memory, or session doesn't exist) then user is sent to login page
            // Also retrieves userID if session in cookie matches session in memory
            const user = { id: undefined };
            let certified = authenticateSession(req, res, user);

            if (!certified) {
                return;
            }

            var userID = user.id;

            // Data Validation 
            const form = new formidable.IncomingForm({
                // Allow empty files when parsing form
                allowEmptyFiles: true,
                minFileSize: 0
            });

            //form.uploadDir = __dirname + '/uploads';

                form.parse(req, (err, fields, files) => {
                    if (err) {
                        console.error('Error parsing form:', err);
                        res.writeHead(500, { 'Content-Type': 'text/plain' });
                        res.end('Internal Server Error');
                        return;
                    }

                    // Security authentication (user must be an artist)
                    getUserRole(userID, (err, roleName) => {
                        // Database connection error handler
                        if (err) {
                            handleDatabaseError(res, err);
                            return;                    
                        }
                        
                        else if (roleName != 'Artist') {
                            //redirectToMainPage(res);
                            // Serve index.html
                            const htmlPath = path.join(__dirname, '..', 'client', 'index.html');
                            fs.readFile(htmlPath, function(err, data) {
                                if (err) {
                                    res.writeHead(404, {'Content-Type': 'text/plain'});
                                    res.end('File not found');
                                }
                                else {
                                    res.writeHead(200, {'Content-Type': 'text/html'});
                                    res.write(data);

                                    // Serve assosciated css file
                                    const cssPath = path.join(__dirname, '..', 'client', 'mainPage.css');
                                    fs.readFile(cssPath, 'utf-8', function(err, cssData) {
                                        if (!err) {
                                            res.write('\n<style>\n' + cssData + '\n</style>');
                                        }
                                        else {
                                            console.error('Error reading CSS file:', err);
                                        }

                                        // Serve assosciated js file
                                        const jsPath = path.join(__dirname, '..', 'client', 'mainPage.js');
                                        fs.readFile(jsPath, 'utf-8', function(err, jsData) {
                                            if (!err) {
                                                res.write('\n<script>\n' + jsData + '\n</script>');
                                            }
                                            else {
                                                console.error('Error reading js file:', err);
                                            }
                                            
                                            // End the response
                                            res.end();
                                        })
                                    })
                                }
                            });

                            console.log('You must be an artist to upload music!!!');
                            // alert js
                            return;
                        }
                    })
                    
                    getUserName(userID, (err, userName) => {
                        // Database connection error handler
                        if (err) {
                            handleDatabaseError(res, err);
                            return;                    
                        }

                        // Access form fields
                        const albumTitle = fields.albumTitle[0];
                        const albumGenre = fields.albumGenre[0];
                        const albumSongs = fields.albumSongs[0];

                        // Access file information
                        const albumCoverFile = files.albumCover;

                        // Get all songs' information
                        const songs = [];

                        for (let i = 1; i <= albumSongs; i++) {
                            // Access each song's title and file
                            const songTitle = fields[`songTitle${i}`][0];
                            const songFile = files[`songFile${i}`];
                        
                            const songFilePath = songFile[0].filepath;
                            const songFileOriginalFilename = songFile[0].originalFilename;
        
                            // if errors in data, redirect user to page with a back button so that they can modify accordingly
                            if (!songFileOriginalFilename.endsWith('.mp3')) {
                                console.log('Only .mp3 files supported');
                                // Redirect to form page
                                redirectToMusicUpload(res);
                                return;
                            }

                            // Read single file content as binary data
                            const songFileContent = fs.readFileSync(songFilePath);

                            // Create an object with title and file information
                            const songDetails = {
                                title: songTitle,
                                content: songFileContent
                            };
                        
                            // Push the song details object to the songs array
                            songs.push(songDetails);
                        }

                        // User didn't select a cover; assign the default one*
                        let coverFileContent = null;
                        if (!albumCoverFile || albumCoverFile[0].size === 0) {
                            console.log('No cover file selected.');
                        }

                        // Read cover file content as binary data to prepare to store in the Database
                        else {
                            const albumCoverFilePath = albumCoverFile[0].filepath;
                            coverFileContent = fs.readFileSync(albumCoverFilePath);
                        }                        
    
                        // Once confirmed user is an artist with no data entry errors, we will INSERT INTO the album / song tables accordingly
                        sql.connect(dbConfig, (err) => {
                            // Database connection error handler
                            if (err) {
                                handleDatabaseError(res, err);
                                return;                    
                            }
    
                            const request = new sql.Request();
    
                            // Define the SQL query with OUTPUT clause to get the inserted ID to then use for Song query
                            const query = 
                            `INSERT INTO MusicLibrary.[Album] (Title, Artist, Genre, Cover, Release_Year, Number_Of_Songs, Created_By)
                            OUTPUT INSERTED.Album_ID
                            VALUES (@albumTitle, @artistName, @albumGenre, @albumCoverFile, '2023', @albumSongs, @artistID);`;

                            // Set parameters for the query
                            request.input('albumTitle', sql.VarChar, albumTitle);
                            request.input('artistName', sql.VarChar, userName);
                            request.input('albumGenre', sql.VarChar, albumGenre);
                            request.input('albumCoverFile', sql.VarBinary, coverFileContent);
                            request.input('albumSongs', sql.Int, albumSongs);
                            request.input('artistID', sql.Int, userID);
    
                            let insertedID;
    
                            request.query(query, (err, result) =>  {
                                if (err) {                                                   // Database query error handler
                                    console.error('Database query error:', err);
                                    sql.close();
                                    res.writeHead(500, { 'Content-Type': 'text/plain' });
                                    res.end('Database query error');
                                    return;
                                }

                                // Process query result and get inserted Album_ID
                                insertedID = result.recordset[0].Album_ID;
                                console.log('Query insert result (1):', insertedID);

                                // Inserts for every song
                                Promise.all(
                                    songs.map(song => {
                                        return new Promise((resolve, reject) => {
                                            const secondRequest = new sql.Request();
                                            const secondQuery = `
                                            INSERT INTO MusicLibrary.[Song] (Album_ID, Title, Artist, Genre, Cover, Release_Year, Marked_For_Deletion, Created_By, Audio_Data)
                                            OUTPUT INSERTED.Song_ID
                                            VALUES (@insertedID, @songTitle, @artistName, @albumGenre, @albumCoverFile, '2023', 0, @createdBy, @songFile);
                                            `;
                                    
                                            secondRequest.input('insertedID', sql.Int, insertedID);
                                            secondRequest.input('songTitle', sql.VarChar, song.title);
                                            secondRequest.input('artistName', sql.VarChar, userName);
                                            secondRequest.input('albumGenre', sql.VarChar, albumGenre);
                                            secondRequest.input('albumCoverFile', sql.VarBinary, coverFileContent);
                                            secondRequest.input('createdBy', sql.Int, userID);
                                            secondRequest.input('songFile', sql.VarBinary, song.content);
                                    
                                            secondRequest.query(secondQuery, (err, secondResult) => {
                                                if (err) {
                                                    console.error('Database query error:', err);
                                                    reject(err);
                                                }
                                                else {
                                                    var songID = secondResult.recordset[0].Song_ID;
                                                    console.log('Query insert result (2):', songID);
                                                    resolve(songID);
                                                }
                                            });
                                        });
                                    })
                                )
                                .then(() => {
                                    // All song insertion queries have finished
                                    sql.close();
                                })
                                .catch(error => {
                                    console.error('Error inserting songs:', error);
                                    sql.close();
                                    res.writeHead(500, { 'Content-Type': 'text/plain' });
                                    res.end('Error inserting songs');
                                });
                            })
                        })
                    })
                })
            res.end();
        }

        else if (fileName === '/getSearchbar') {
            console.log("Im Here");
            sql.connect(dbConfig, (err) => {
                // Database connection error handler
                if (err) {
                    handleDatabaseError(res, err);
                    return;                    
                }

                const request = new sql.Request();

                // Defining SELECT query to pass back to html
                var query = `
                SELECT 
                Title, Artist
                FROM MusicLibrary.[Song] 
                FOR JSON AUTO`;

                // Process query result and store it to use as a response
                request.query(query, (err, result) =>  {
                    if (err) {                                                   // Database query error handler
                        console.error('Database query error:', err);
                        sql.close();
                        res.writeHead(500, { 'Content-Type': 'text/plain' });
                        res.end('Database query error');
                        return;
                    }
                    //console.log(result);
                    const rows = result.recordset[0];
                    //console.log(rows);
                    const jsonData = JSON.stringify(rows);
                    res.writeHead(200, {
                        'Content-Type': 'application/json',
                        'Content-Length': Buffer.byteLength(jsonData, 'utf8'), //remove row below if needed
                        /* "Access-Control-Allow-Origin": "*" */
                    });

                    console.log(jsonData);
                    res.end(jsonData);
                })
            })
            return;
        }

        else if(fileName === '/listenerDataReport') {
            console.log('In listener report');
            // Attempts to authenticate a user's session; if not authentic (session doesn't match server memory, or session doesn't exist) then user is sent to login page
            // Also retrieves userID if session in cookie matches session in memory
            const user = { id: undefined };
            let certified = authenticateSession(req, res, user);

            if (!certified) {
                return;
            }

            var userID = user.id;

            // Data Validation 
            const form = new formidable.IncomingForm();
            console.log(form);
            form.parse(req, (err, fields) => {
                if (err) {
                    console.error('Error parsing form:', err);
                    res.writeHead(500, { 'Content-Type': 'text/plain' });
                    res.end('Internal Server Error');
                    return;
                }
                // Access form fields

                const fromDate = fields.fromDate[0];
                const toDate = fields.toDate[0];
                const minRating = fields.minimumRating[0];
                const maxRating = fields.maximumRating[0];
                const minListens = fields.minimumListens[0];
                let genre = fields.genre[0];

                if (genre === 'ALL') {
                    genre = '%'
                }

                console.log('fromDate', fromDate);
                console.log('toDate', toDate);
                console.log('userID', userID);
                console.log('minRating', minRating);
                console.log('maxRating', maxRating);
                console.log('minListens', minListens);
                console.log('genre', genre);

                sql.connect(dbConfig, (err) => {
                    // Database connection error handler
                    if (err) {
                        handleDatabaseError(res, err);
                        return;                    
                    }

                    const request = new sql.Request();
                    
                    // const query = `SELECT A.Title, A.Times_Played, A.Rating, A.Genre FROM MusicLibrary.[Song] A;`;

                    
                    // Defining SELECT query to pass back to html form to display as a grid
                    const query = 
                    `SELECT A.Song_ID, A.Cougar_ID, C.Genre, A.Listens, B.Rating
                    FROM MusicLibrary.[User_Song_Listens] A, MusicLibrary.[User_Song_Rating] B, MusicLibrary.[Song] C
                    WHERE A.Cougar_ID = 9
                    AND A.Cougar_ID = B.Cougar_ID
                    AND A.Song_ID = B.Song_ID
                    AND A.Song_ID = C.Song_ID
                    AND A.Listens >= @minListens
                    AND B.Rating BETWEEN @minRating AND @maxRating
                    AND C.Created_At BETWEEN CONVERT(datetime2, @fromDate) AND CONVERT(datetime2, @toDate)
                    AND C.Genre LIKE @genre
                    ORDER BY B.Rating DESC, A.Listens DESC;`

                    // Set parameters for the query
                    request.input('artistID', sql.Int, userID);
                    request.input('genre', sql.VarChar, genre);
                    request.input('minRating', sql.Int, minRating);
                    request.input('maxRating', sql.Int, maxRating);
                    request.input('minListens', sql.Int, minListens);
                    request.input('fromDate', sql.DateTime2, fromDate);
                    request.input('toDate', sql.DateTime2, toDate);

                    // Process query result and store it to use as a response
                    request.query(query, (err, result) =>  {
                        if (err) {                                                   // Database query error handler
                            console.error('Database query error:', err);
                            sql.close();
                            res.writeHead(500, { 'Content-Type': 'text/plain' });
                            res.end('Database query error');
                            return;
                        }
                        // Collects rows of data and stores it as JSON to send back to the client
                        const rows = result.recordset;
                        const jsonData = JSON.stringify(rows);
                        res.writeHead(200, {
                            'Content-Type': 'application/json',
                            'Content-Length': Buffer.byteLength(jsonData, 'utf8')
                        });

                        console.log(jsonData);
                        res.end(jsonData);
                    })
                })
            })
        }

        else if(fileName === '/artistDataReport') {
            // Attempts to authenticate a user's session; if not authentic (session doesn't match server memory, or session doesn't exist) then user is sent to login page
            // Also retrieves userID if session in cookie matches session in memory
            const user = { id: undefined };
            let certified = authenticateSession(req, res, user);

            if (!certified) {
                return;
            }

            var userID = user.id;

            // Data Validation 
            const form = new formidable.IncomingForm();
            console.log(form);
            form.parse(req, (err, fields) => {
                if (err) {
                    console.error('Error parsing form:', err);
                    res.writeHead(500, { 'Content-Type': 'text/plain' });
                    res.end('Internal Server Error');
                    return;
                }
                // Access form fields
                const albumParameter = fields.selection[0];
                // Sets albumTitle parameter accordingly
                let albumTitle;
                if (albumParameter === 'allAlbums') {
                    albumTitle = '%';
                }
                else {
                    albumTitle = fields.albumTitle[0];
                }

                // Sets state parameter accordingly
                let state = fields.state[0];
                if (state === 'ALL') {
                    state = '%';
                }

                const minRating = fields.minimumRating[0];
                const maxRating = fields.maximumRating[0];
                const minListens = fields.minimumListens[0];
                const maxListens = fields.maximumListens[0];
                const fromDate = fields.fromDate[0];
                const toDate = fields.toDate[0];

                console.log('userID', userID);
                console.log('albumTitle', albumTitle);
                console.log('state', state);
                console.log('minRating', minRating);
                console.log('maxRating', maxRating);
                console.log('minListens', minListens);
                console.log('maxListens', maxListens);
                console.log('fromDate', fromDate);
                console.log('toDate', toDate);

                sql.connect(dbConfig, (err) => {
                    // Database connection error handler
                    if (err) {
                        handleDatabaseError(res, err);
                        return;                    
                    }

                    const request = new sql.Request();
                    
                    // const query = `SELECT A.Title, A.Times_Played, A.Rating, A.Genre FROM MusicLibrary.[Song] A;`;

                    
                    // Defining SELECT query to pass back to html form to display as a grid
                    const query = 
                    `SELECT DISTINCT A.Title, A.Times_Played, A.Rating, A.Genre, FORMAT(A.Created_At, 'MM/dd/yyyy') AS Created_Date
                    FROM MusicLibrary.[Song] A, MusicLibrary.[Album] B, MusicLibrary.[User_Song_Rating] D, MusicLibrary.[Listener] E, MusicLibrary.[User] F
                    WHERE F.Cougar_ID = @artistID
                    AND F.Role_ID = 2
                    AND B.Created_By = F.Cougar_ID
                    AND A.Album_ID = B.Album_ID
                    AND A.Song_ID = D.Song_ID
                    AND D.Cougar_ID = E.Cougar_ID
                    AND E.[State] LIKE @state
                    AND B.Title LIKE @album
                    AND A.Rating BETWEEN @minRating AND @maxRating
                    AND A.Times_Played BETWEEN @minListens AND @maxListens
                    AND A.Created_At BETWEEN CONVERT(datetime2, @fromDate) AND CONVERT(datetime2, @toDate);`

                    // Set parameters for the query
                    request.input('artistID', sql.Int, userID);
                    request.input('state', sql.VarChar, state);
                    request.input('album', sql.VarChar, albumTitle);
                    request.input('minRating', sql.Int, minRating);
                    request.input('maxRating', sql.Int, maxRating);
                    request.input('minListens', sql.Int, minListens);
                    request.input('maxListens', sql.Int, maxListens);
                    request.input('fromDate', sql.DateTime2, fromDate);
                    request.input('toDate', sql.DateTime2, toDate);

                    // Process query result and store it to use as a response
                    request.query(query, (err, result) =>  {
                        if (err) {                                                   // Database query error handler
                            console.error('Database query error:', err);
                            sql.close();
                            res.writeHead(500, { 'Content-Type': 'text/plain' });
                            res.end('Database query error');
                            return;
                        }
                        // Collects rows of data and stores it as JSON to send back to the client
                        const rows = result.recordset;
                        const jsonData = JSON.stringify(rows);
                        res.writeHead(200, {
                            'Content-Type': 'application/json',
                            'Content-Length': Buffer.byteLength(jsonData, 'utf8')
                        });

                        console.log(jsonData);
                        res.end(jsonData);
                    })
                })
            })
        }

        else if(fileName === '/adminDataReport') {
            // Data parsing

            const data_from_server = await getReqData(req);
            const data_from_server_json = JSON.parse(data_from_server);
            console.log(typeof(data_from_server));
            console.log(typeof(data_from_server_json));
            console.log('data_from_server_json:')
            console.log(data_from_server_json);

            var number_of_artists_to_include = data_from_server_json.number_of_artists;
            var include_city = data_from_server_json.include_city;
            var include_name_of_song = data_from_server_json.include_most_famous_song_name;
            var genre_selected = data_from_server_json.genre_selected;
            console.log(number_of_artists_to_include);
            console.log(include_city); // boolean (will always include)
            console.log(include_name_of_song); // boolean (will always include)
            console.log(genre_selected);



            sql.connect(dbConfig, (err) => {
                // Database connection error handler
                if (err) {
                    handleDatabaseError(res, err);
                    return;                    
                }

                const request = new sql.Request();
                
                var query;
                if (genre_selected ==='All Genres') { 
                    query = `WITH
                            table1
                            AS
                            
                            (
                                SELECT
                                    [Created_By] AS Artist_ID,
                                    [Title] AS Song_Name,
                                    SUM([Listens]) AS total_listens
                                FROM
                                    [MusicLibrary].[Song],
                                    [MusicLibrary].[User_Song_Listens]
                                WHERE 
                                [MusicLibrary].[Song].[Song_ID] = [MusicLibrary].[User_Song_Listens].[Song_ID]
                                GROUP BY 
                                [Created_By], 
                                [Title]   
                        
                            )
                        /*,table3 AS(*/
                        
                        SELECT * FROM (
                        SELECT t2.*
                        FROM table1 RIGHT JOIN (
                        SELECT Artist_ID, Song_Name, MAX(total_listens) AS max_listens
                            FROM table1
                            GROUP BY table1.Artist_ID, table1.Song_Name
                        ) AS t2 ON table1.Artist_ID = t2.Artist_ID AND table1.Song_Name=t2.Song_Name
                        ) AS table_a/*;*/
                        
                        JOIN (
                            SELECT most_famous_artist_table.*, other_details.Username, other_details.City, other_details.State, other_details.user_since FROM (
                                SELECT TOP ${number_of_artists_to_include}
                                    [Created_By] AS 'user_ids', SUM([Listens]) AS 'total_listens_for_artist'
                                FROM [MusicLibrary].[Song], [MusicLibrary].[User_Song_Listens]
                                WHERE  [MusicLibrary].[Song].[Song_ID] =  [MusicLibrary].[User_Song_Listens].[Song_ID]
                                GROUP BY [Created_By]) /*ORDER BY [Listens] DESC*/
                            AS most_famous_artist_table 
                            JOIN (
                            SELECT [MusicLibrary].[User].[Cougar_ID] AS 'id',[Username],[City], [State],[Created_At] as 'user_since'
                            FROM [MusicLibrary].[User], [MusicLibrary].[Artist]
                            WHERE [MusicLibrary].[User].[Cougar_ID] = [MusicLibrary].[Artist].[Cougar_ID]
                            ) AS other_details ON most_famous_artist_table.user_ids = other_details.id
                        ) AS extra_table ON extra_table.user_ids=table_a.Artist_ID ORDER BY total_listens_for_artist;`;
                }
                else {
                query = `WITH
                        table1
                        AS
                        
                        (
                            SELECT
                                [Created_By] AS Artist_ID,
                                [Title] AS Song_Name,
                                SUM([Listens]) AS total_listens
                            FROM
                                [MusicLibrary].[Song],
                                [MusicLibrary].[User_Song_Listens]
                            WHERE 
                            [MusicLibrary].[Song].[Song_ID] = [MusicLibrary].[User_Song_Listens].[Song_ID]
                                AND [Genre] = '${genre_selected}'
                            GROUP BY 
                            [Created_By], 
                            [Title]   
            
                        )
                    /*,table3 AS(*/
            
                    SELECT * FROM (
                    SELECT t2.*
                    FROM table1 RIGHT JOIN (
                    SELECT Artist_ID, Song_Name, MAX(total_listens) AS max_listens
                        FROM table1
                        GROUP BY table1.Artist_ID, table1.Song_Name
                    ) AS t2 ON table1.Artist_ID = t2.Artist_ID AND table1.Song_Name=t2.Song_Name
                    ) AS table_a/*;*/
            
                    JOIN (
                        SELECT most_famous_artist_table.*, other_details.Username, other_details.City, other_details.State, other_details.user_since FROM (
                            SELECT TOP ${number_of_artists_to_include}
                                [Created_By] AS 'user_ids', SUM([Listens]) AS 'total_listens_for_artist'
                            FROM [MusicLibrary].[Song], [MusicLibrary].[User_Song_Listens]
                            WHERE  [MusicLibrary].[Song].[Song_ID] =  [MusicLibrary].[User_Song_Listens].[Song_ID]
                                AND [Song].[Genre] = '${genre_selected}'
                            GROUP BY [Created_By]) /*ORDER BY [Listens] DESC*/
                        AS most_famous_artist_table 
                        JOIN (
                        SELECT [MusicLibrary].[User].[Cougar_ID] AS 'id',[Username],[City], [State],[Created_At] as 'user_since'
                        FROM [MusicLibrary].[User], [MusicLibrary].[Artist]
                        WHERE [MusicLibrary].[User].[Cougar_ID] = [MusicLibrary].[Artist].[Cougar_ID]
                        ) AS other_details ON most_famous_artist_table.user_ids = other_details.id
                    ) AS extra_table ON extra_table.user_ids=table_a.Artist_ID ORDER BY total_listens_for_artist;`;
                }

                // Process query result and store it to use as a response
                request.query(query, (err, result) =>  {
                    if (err) {                                                   // Database query error handler
                        console.error('Database query error:', err);
                        sql.close();
                        res.writeHead(500, { 'Content-Type': 'text/plain' });
                        res.end('Database query error');
                        return;
                    }
                    // Collects rows of data and stores it as JSON to send back to the client
                    console.log(result);
                    const rows = result.recordset;
                    console.log(rows);
                    const jsonData = JSON.stringify(rows);
                    res.writeHead(200, {
                        'Content-Type': 'application/json',
                        'Content-Length': Buffer.byteLength(jsonData, 'utf8'), //remove row below if needed
                        "Access-Control-Allow-Origin": "*"
                    });

                    console.log(jsonData);
                    res.end(jsonData);
                })
            })
            
            return;
            
            
        }

        else if(fileName === '/adminDeleteUser') {
            // Data parsing

            const data_from_server = await getReqData(req);
            const data_from_server_json = JSON.parse(data_from_server);
            console.log(typeof(data_from_server));
            console.log(typeof(data_from_server_json));
            console.log('data_from_server_json:')
            console.log(data_from_server_json);
            var target_cougar_id_to_delete = data_from_server_json.target_cougar_id_to_delete;

            sql.connect(dbConfig, (err) => {
                // Database connection error handler
                if (err) {
                    handleDatabaseError(res, err);
                    return;                    
                }

                const request = new sql.Request();
                
                var query=`UPDATE [MusicLibrary].[User] 
                SET [Marked_For_Deletion] = 1 WHERE [Cougar_ID] = ${target_cougar_id_to_delete};`;

                // Process query result and store it to use as a response
                request.query(query, (err, result) =>  {
                    if (err) {                                                   // Database query error handler
                        console.error('Database query error:', err);
                        sql.close();
                        res.writeHead(500, { 'Content-Type': 'text/plain' });
                        res.end('Database query error');
                        return;
                    }
                    // Collects rows of data and stores it as JSON to send back to the client
                    console.log(result);
                    const rows = result.rowsAffected;
                    console.log(rows);
                    const jsonData = JSON.stringify(rows);
                    res.writeHead(200, {
                        'Content-Type': 'application/json',
                        /*'Content-Length': Buffer.byteLength(jsonData, 'utf8'),*/ //remove row below if needed
                        "Access-Control-Allow-Origin": "*"
                    });
                    console.log('response sent:')
                    console.log(jsonData);
                    res.end(jsonData);
                })
            })
            
           return;
            
            
        }

        else if(fileName === '/updateMyUsername') {
            // Data parsing

            const userCookie = req.headers.cookie;

            var user_id = getIdFromCookie(userCookie);
            var userID;
            if (!(user_id == undefined)){
                userID = user_id;
            }
            else {
                console.log('Axel code could not get the user id from the cookie')
                return;
            }

            const data_from_server = await getReqData(req);
            const data_from_server_json = JSON.parse(data_from_server);
            console.log(typeof(data_from_server));
            console.log(typeof(data_from_server_json));
            console.log('data_from_server_json:')
            console.log(data_from_server_json);
            var new_username = data_from_server_json.desired_new_username;

            sql.connect(dbConfig, (err) => {
                // Database connection error handler
                if (err) {
                    handleDatabaseError(res, err);
                    return;                    
                }

                const request = new sql.Request();

                var query=`UPDATE [MusicLibrary].[User] 
                SET [Username] = '${new_username}' WHERE [Cougar_ID] = ${userID};`;

                // Process query result and store it to use as a response
                request.query(query, (err, result) =>  {
                    if (err) {                                                   // Database query error handler
                        console.error('Database query error:', err);
                        sql.close();
                        res.writeHead(500, { 'Content-Type': 'text/plain' });
                        res.end('Database query error');
                        return;
                    }
                    // Collects rows of data and stores it as JSON to send back to the client
                    console.log('results for username update:')
                    console.log(result);
                    const rows = result.rowsAffected;
                    console.log(rows);
                    const jsonData = JSON.stringify(rows);
                    res.writeHead(200, {
                        'Content-Type': 'application/json',
                        /*'Content-Length': Buffer.byteLength(jsonData, 'utf8'),*/
                        "Access-Control-Allow-Origin": "*"
                    });
                    console.log('response sent for username update:')
                    console.log(jsonData);
                    res.end(jsonData);
                })
            })
            
           return;
            
            
        }

        else if(fileName === '/updateMyPassword') {
            // Data parsing

            const userCookie = req.headers.cookie;

            var user_id = getIdFromCookie(userCookie);
            var userID;
            if (!(user_id == undefined)){
                userID = user_id;
            }
            else {
                console.log('Axel code could not get the user id from the cookie')
                return;
            }

            const data_from_server = await getReqData(req);
            const data_from_server_json = JSON.parse(data_from_server);
            console.log(typeof(data_from_server));
            console.log(typeof(data_from_server_json));
            console.log('data_from_server_json:')
            console.log(data_from_server_json);
            var desired_password = data_from_server_json.desired_new_password;

            sql.connect(dbConfig, (err) => {
                // Database connection error handler
                if (err) {
                    handleDatabaseError(res, err);
                    return;                    
                }

                const request = new sql.Request();

                var query=`UPDATE [MusicLibrary].[User] 
                SET [Pass] = '${desired_password}' WHERE [Cougar_ID] = ${userID};`;

                // Process query result and store it to use as a response
                request.query(query, (err, result) =>  {
                    if (err) {                                                   // Database query error handler
                        console.error('Database query error:', err);
                        sql.close();
                        res.writeHead(500, { 'Content-Type': 'text/plain' });
                        res.end('Database query error');
                        return;
                    }
                    // Collects rows of data and stores it as JSON to send back to the client
                    console.log('results for username update:')
                    console.log(result);
                    const rows = result.rowsAffected;
                    console.log(rows);
                    const jsonData = JSON.stringify(rows);
                    res.writeHead(200, {
                        'Content-Type': 'application/json',
                        /*'Content-Length': Buffer.byteLength(jsonData, 'utf8'),*/ //remove row below if needed
                        "Access-Control-Allow-Origin": "*"
                    });
                    console.log('response sent for password update:')
                    console.log(jsonData);
                    res.end(jsonData);
                })
            })
            
           return;
            
            
        }

        

        // No file exists for this POST method
        else {
            res.writeHead(404, {'Content-Type': 'text/plain'});
            res.end('Not Found');
        }



    }

    // We can create functions / modules outside of this app for better organization maybe
    else if (req.method === 'GET') {
        console.log('File path for GET request:', fileName);
        // Keep as template for now, create branch for your html doc
        
        if (fileName === '/login/musicUpload.html') {

            // Attempts to authenticate a user's session; if not authentic (session doesn't match server memory, or session doesn't exist) then user is sent to login page
            // Also retrieves userID if session in cookie matches session in memory
            const user = { id: undefined };
            let certified = authenticateSession(req, res, user);

            if (!certified) {
                return;
            }

            var userID = user.id;
            
            // Data Validation / Security authentication (user must be an artist)
            getUserRole(userID, (err, roleName) => {
                // Database connection error handler
                if (err) {
                    handleDatabaseError(res, err);
                    return;                    
                }
                
                else if (roleName != 'Artist') {
                    //redirectToMainPage(res);

                    // Serve index.html
                    const htmlPath = path.join(__dirname, '..', 'client', 'index.html');
                    fs.readFile(htmlPath, function(err, data) {
                        if (err) {
                            res.writeHead(404, {'Content-Type': 'text/plain'});
                            res.end('File not found');
                        }
                        else {
                            res.writeHead(200, {'Content-Type': 'text/html'});
                            res.write(data);

                            // Serve assosciated css file
                            const cssPath = path.join(__dirname, '..', 'client', 'mainPage.css');
                            fs.readFile(cssPath, 'utf-8', function(err, cssData) {
                                if (!err) {
                                    res.write('\n<style>\n' + cssData + '\n</style>');
                                }
                                else {
                                    console.error('Error reading CSS file:', err);
                                }

                                // Serve assosciated js file
                                const jsPath = path.join(__dirname, '..', 'client', 'mainPage.js');
                                fs.readFile(jsPath, 'utf-8', function(err, jsData) {
                                    if (!err) {
                                        res.write('\n<script>\n' + jsData + '\n</script>');
                                    }
                                    else {
                                        console.error('Error reading js file:', err);
                                    }
                                    
                                    // End the response
                                    res.end();
                                })
                            })
                        }
                    });

                    console.log('You must be an artist to upload music!!!');
                    // alert js
                    return;
                }

                // Serve musicUpload.html
                const musicUploadHtmlPath = path.join(__dirname, '..', 'client', 'musicUpload.html');
                const writeHeadParameters = [200, { 'Content-Type': 'text/html; charset=utf-8' }];

                serveFile(res, 1, writeHeadParameters, musicUploadHtmlPath);
            })
            return; // Return to avoid further processing for this route
        }

        else if (fileName === '/getAlbumID') {
            const userCookie = req.headers.cookie;
            let userID = getIdFromCookie(userCookie)

            let recommendedAlbum;
            getRecommendedAlbum(userID, (err, recommendedAlbum) => {
                if (err) {
                    console.error('Error:', err);
                    res.status(500).json({ error: 'Server error' });
                    return;
                }

                console.log('Recommended Album: ', recommendedAlbum);
                if (recommendedAlbum) {
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ recommendedAlbum }));
                }
                else {
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ recommendedAlbum: null }));
                }
            })
        }

        else if (fileName === '/login/searchbar.html') {
            const user = { id: undefined };
            let certified = authenticateSession(req, res, user);
        
            if (!certified) {
                return;
            }
        
            var userID = user.id;
            
            const htmlPath = path.join(__dirname, '..', 'client', 'searchbar.html');
            fs.readFile(htmlPath, function (err, data) {
                if (err) {
                    res.writeHead(404, { 'Content-Type': 'text/plain' });
                    res.end('File not found');
                }
                else {
                    res.writeHead(200, { 'Content-Type': 'text/html' });
                    res.write(data);
                    res.end();
                }
            });
        
            return; // Return to avoid further processing for this route
        }

        else if (fileName === '/login/listener_report.html') {
            const user = { id: undefined };
            let certified = authenticateSession(req, res, user);

            if (!certified) {
                return;
            }

            var userID = user.id;
            
            getUserRole(userID, (err, roleName) => {
                // Database connection error handler
                if (err) {
                    handleDatabaseError(res, err);
                    return;                    
                }

                // Serve listener_report.html
                const htmlPath = path.join(__dirname, '..', 'client', 'listener_report.html');
                fs.readFile(htmlPath, function(err, data) {
                    if (err) {
                        res.writeHead(404, {'Content-Type': 'text/plain'});
                        res.end('File not found');
                    }
                    else {
                        res.writeHead(200, {'Content-Type': 'text/html'});
                        res.write(data);
                        res.end();
                    }
                });
            })
            return; // Return to avoid further processing for this route
        }

        else if (fileName === '/login/artistDataReport.html') {
            const user = { id: undefined };
            let certified = authenticateSession(req, res, user);

            if (!certified) {
                return;
            }

            var userID = user.id;
            
            // Security authentication (user must be an artist)
            getUserRole(userID, (err, roleName) => {
                // Database connection error handler
                if (err) {
                    handleDatabaseError(res, err);
                    return;                    
                }
                
                else if (roleName != 'Artist') {
                    //redirectToMainPage(res);

                    // Serve index.html
                    const htmlPath = path.join(__dirname, '..', 'client', 'index.html');
                    fs.readFile(htmlPath, function(err, data) {
                        if (err) {
                            res.writeHead(404, {'Content-Type': 'text/plain'});
                            res.end('File not found');
                        }
                        else {
                            res.writeHead(200, {'Content-Type': 'text/html'});
                            res.write(data);

                            // Serve assosciated css file
                            const cssPath = path.join(__dirname, '..', 'client', 'mainPage.css');
                            fs.readFile(cssPath, 'utf-8', function(err, cssData) {
                                if (!err) {
                                    res.write('\n<style>\n' + cssData + '\n</style>');
                                }
                                else {
                                    console.error('Error reading CSS file:', err);
                                }

                                // Serve assosciated js file
                                const jsPath = path.join(__dirname, '..', 'client', 'mainPage.js');
                                fs.readFile(jsPath, 'utf-8', function(err, jsData) {
                                    if (!err) {
                                        res.write('\n<script>\n' + jsData + '\n</script>');
                                    }
                                    else {
                                        console.error('Error reading js file:', err);
                                    }
                                    
                                    // End the response
                                    res.end();
                                })
                            })
                        }
                    });

                    console.log('You must be an artist to see artist reports!!!');
                    // alert js
                    return;
                }

                const artistDataReportHtmlPath = path.join(__dirname, '..', 'client', 'artistDataReport.html');
                const writeHeadParameters = [200, { 'Content-Type': 'text/html; charset=utf-8' }];

                // Serve artistDataReport.html
                serveFile(res, 1, writeHeadParameters, artistDataReportHtmlPath);
            })
            return; // Return to avoid further processing for this route
        }

        else if (fileName === '/login.html') {
            // Serve login.html
            const htmlPath = path.join(__dirname, '..', 'client', 'login.html');
            fs.readFile(htmlPath, function (err, data) {
                if (err) {
                    res.writeHead(404, { 'Content-Type': 'text/plain' });
                    res.end('File not found');
                }
                else {
                    res.writeHead(200, { 'Content-Type': 'text/html' });
                    res.write(data);

                    // Serve assosciated css file
                    const cssPath = path.join(__dirname, '..', 'client', 'playlist_login.css');
                    fs.readFile(cssPath, 'utf-8', function (err, cssData) {
                        if (!err) {
                            res.write('\n<style>\n' + cssData + '\n</style>');
                        }
                        else {
                            console.error('Error reading CSS file:', err);
                        }

                        // Serve assosciated js file
                        const jsPath = path.join(__dirname, '..', 'client', 'login.js');
                        fs.readFile(jsPath, 'utf-8', function (err, jsData) {
                            if (!err) {
                                res.write('\n<script>\n' + jsData + '\n</script>');
                            }
                            else {
                                console.error('Error reading js file:', err);
                            }

                            // End the response
                            res.end();
                        })
                    })
                }
            });

            // Connect to database

            // Do user account authentication to ensure they have access to see report (if they are an artist and the report is for their music)/ playlist (if hidden but they are the owner), etc.

            // If no access, close connection and output appropriate message to them

            // Else, do a request.query('SELECT thing_1, thing_2, etc., FROM table_1, table_2, WHERE conditions', ...) to pull rows of data. Next, find out how to modify page to showcase data pulled (may need to use fs object)

            return; // Return to avoid further processing for this route
        }

        else if (fileName === '/login/login.html') {
            const filePath = path.join(__dirname, '..', 'client', 'login.html');
            // Authenticates user session
            const user = { id: undefined };
            let certified = authenticateSession(req, res, user);

            if (!certified) {
                return;
            }

            var userID = user.id;
            // Serve login.html
            // Serve login.html
            const htmlPath = path.join(__dirname, '..', 'client', 'login.html');
            fs.readFile(htmlPath, function (err, data) {
                if (err) {
                    res.writeHead(404, { 'Content-Type': 'text/plain' });
                    res.end('File not found');
                }
                else {
                    res.writeHead(200, { 'Content-Type': 'text/html' });
                    res.write(data);

                    // Serve assosciated css file
                    const cssPath = path.join(__dirname, '..', 'client', 'playlist_login.css');
                    fs.readFile(cssPath, 'utf-8', function (err, cssData) {
                        if (!err) {
                            res.write('\n<style>\n' + cssData + '\n</style>');
                        }
                        else {
                            console.error('Error reading CSS file:', err);
                        }

                        // Serve assosciated js file
                        const jsPath = path.join(__dirname, '..', 'client', 'login.js');
                        fs.readFile(jsPath, 'utf-8', function (err, jsData) {
                            if (!err) {
                                res.write('\n<script>\n' + jsData + '\n</script>');
                            }
                            else {
                                console.error('Error reading js file:', err);
                            }

                            // End the response
                            res.end();
                        })
                    })
                }
            });

            // Connect to database

            // Do user account authentication to ensure they have access to see report (if they are an artist and the report is for their music)/ playlist (if hidden but they are the owner), etc.

            // If no access, close connection and output appropriate message to them

            // Else, do a request.query('SELECT thing_1, thing_2, etc., FROM table_1, table_2, WHERE conditions', ...) to pull rows of data. Next, find out how to modify page to showcase data pulled (may need to use fs object)

            return; // Return to avoid further processing for this route
        }

        else if (fileName === '/login/admin.html') {

            const user = { id: undefined };
            let certified = authenticateSession(req, res, user);

            if (!certified) {
                return;
            }

            var userID = user.id;
            
            // Security authentication (user must be an admin)
            getUserRole(userID, (err, roleName) => {
                // Database connection error handler
                if (err) {
                    handleDatabaseError(res, err);
                    return;                    
                }
                
                else if (roleName != 'Admin') {
                    //redirectToMainPage(res);

                    // Serve index.html
                    const htmlPath = path.join(__dirname, '..', 'client', 'index.html');
                    fs.readFile(htmlPath, function(err, data) {
                        if (err) {
                            res.writeHead(404, {'Content-Type': 'text/plain'});
                            res.end('File not found');
                        }
                        else {
                            res.writeHead(200, {'Content-Type': 'text/html'});
                            res.write(data);

                            // Serve assosciated css file
                            const cssPath = path.join(__dirname, '..', 'client', 'mainPage.css');
                            fs.readFile(cssPath, 'utf-8', function(err, cssData) {
                                if (!err) {
                                    res.write('\n<style>\n' + cssData + '\n</style>');
                                }
                                else {
                                    console.error('Error reading CSS file:', err);
                                }

                                // Serve assosciated js file
                                const jsPath = path.join(__dirname, '..', 'client', 'mainPage.js');
                                fs.readFile(jsPath, 'utf-8', function(err, jsData) {
                                    if (!err) {
                                        res.write('\n<script>\n' + jsData + '\n</script>');
                                    }
                                    else {
                                        console.error('Error reading js file:', err);
                                    }
                                    
                                    // End the response
                                    res.end();
                                })
                            })
                        }
                    });

                    console.log('You must be an admin to navigate to this page!!!');
                    // alert js
                    return;
                }

                // Serve admin page
                const htmlFilePath = path.join(__dirname, '..', 'client', 'admin.html');
                fs.readFile(htmlFilePath, function(err, data) {
                    if (err) {
                        res.writeHead(404, {'Content-Type': 'text/plain'});
                        res.end('File not found');
                    }
                    else {
                        res.writeHead(200, {'Content-Type': 'text/html'});
                        res.write(data);
                        res.end();
                    }
                });
            })
            return; // Return to avoid further processing for this route
        }

        else if (fileName === '/login/settings_page/index.html') {
            const user = { id: undefined };
            let certified = authenticateSession(req, res, user);

            if (!certified) {
                return;
            }

            var userID = user.id;

            // Serve settings page
            const htmlFilePath = path.join(__dirname, '..', 'client', 'settings_page','index.html');
            fs.readFile(htmlFilePath, function(err, data) {
                if (err) {
                    res.writeHead(404, {'Content-Type': 'text/plain'});
                    res.end('File not found');
                }
                else {
                    res.writeHead(200, {'Content-Type': 'text/html'});
                    res.write(data);

                    // Serve assosciated css file
                    const cssFilePath = path.join(__dirname, '..', 'client', 'settings_page','stylesheet.css');
                    fs.readFile(cssFilePath, 'utf-8', function(err, cssData) {
                        if (!err) {
                            res.write('\n<style>\n' + cssData + '\n</style>');
                        }
                        else {
                            console.error('Error reading CSS file:', err);
                        }

                        // Serve assosciated js file
                        const jsFilePath = path.join(__dirname, '..', 'client', 'settings_page','script.js');
                        fs.readFile(jsFilePath, 'utf-8', function(err, jsData) {
                            if (!err) {
                                res.write('\n<script>\n' + jsData + '\n</script>');
                            }
                            else {
                                console.error('Error reading js file:', err);
                            }
                            
                            // End the response
                            res.end();
                        })
                    })
                }
            });

            return; // Return to avoid further processing for this route
        }

        else if (fileName === '/login/index.html') {

            // Attempts to authenticate a user's session; if not authentic (session doesn't match server memory, or session doesn't exist) then user is sent to login page
            // Also retrieves userID if session in cookie matches session in memory
            const user = { id: undefined };
            let certified = authenticateSession(req, res, user);

            if (!certified) {
                return;
            }

            var userID = user.id;
            
            // Serve index.html
            const htmlPath = path.join(__dirname, '..', 'client', 'index.html');
            fs.readFile(htmlPath, function(err, data) {
                if (err) {
                    res.writeHead(404, {'Content-Type': 'text/plain'});
                    res.end('File not found');
                }
                else {
                    res.writeHead(200, {'Content-Type': 'text/html'});
                    res.write(data);

                    // Serve assosciated css file
                    const cssPath = path.join(__dirname, '..', 'client', 'mainPage.css');
                    fs.readFile(cssPath, 'utf-8', function(err, cssData) {
                        if (!err) {
                            res.write('\n<style>\n' + cssData + '\n</style>');
                        }
                        else {
                            console.error('Error reading CSS file:', err);
                        }

                        // Serve assosciated js file
                        const jsPath = path.join(__dirname, '..', 'client', 'mainPage.js');
                        fs.readFile(jsPath, 'utf-8', function(err, jsData) {
                            if (!err) {
                                res.write('\n<script>\n' + jsData + '\n</script>');
                            }
                            else {
                                console.error('Error reading js file:', err);
                            }
                            
                            // End the response
                            res.end();
                        })
                    })
                }
            });
            
            // Connect to database

            // Do user account authentication to ensure they have access to see report (if they are an artist and the report is for their music)/ playlist (if hidden but they are the owner), etc.

            // If no access, close connection and output appropriate message to them

            // Else, do a request.query('SELECT thing_1, thing_2, etc., FROM table_1, table_2, WHERE conditions', ...) to pull rows of data. Next, find out how to modify page to showcase data pulled (may need to use fs object)

            return; // Return to avoid further processing for this route
        }
        
        else if (fileName === '/login/playlist.html') {
            // Serve playlist.html
            const htmlPath = path.join(__dirname, '..', 'client', 'playlist.html');
            fs.readFile(htmlPath, function (err, data) {
                if (err) {
                    res.writeHead(404, { 'Content-Type': 'text/plain' });
                    res.end('File not found');
                }
                else {
                    res.writeHead(200, { 'Content-Type': 'text/html' });
                    res.write(data);

                    // Serve assosciated css file
                    const cssPath = path.join(__dirname, '..', 'client', 'playlist_login.css');
                    fs.readFile(cssPath, 'utf-8', function (err, cssData) {
                        if (!err) {
                            res.write('\n<style>\n' + cssData + '\n</style>');
                        }
                        else {
                            console.error('Error reading CSS file:', err);
                        }

                        // Serve assosciated js file
                        
                        const jsPath = path.join(__dirname, '..', 'client', 'playlist.js');
                        fs.readFile(jsPath, 'utf-8', function (err, jsData) {
                            if (!err) {
                                res.write('\n<script>\n' + jsData + '\n</script>');
                            }
                            else {
                                console.error('Error reading js file:', err);
                            }

                            // End the response
                        })
                        
                        res.end();
                    })
                }
            });
            
            // Connect to database

            // Do user account authentication to ensure they have access to see report (if they are an artist and the report is for their music)/ playlist (if hidden but they are the owner), etc.

            // If no access, close connection and output appropriate message to them

            // Else, do a request.query('SELECT thing_1, thing_2, etc., FROM table_1, table_2, WHERE conditions', ...) to pull rows of data. Next, find out how to modify page to showcase data pulled (may need to use fs object)

            return; // Return to avoid further processing for this route
        }

        else if (fileName === '/login/profile.html') {
            const profileHtmlPath = path.join(__dirname, '..', 'client', 'profile.html');
            const profileCssFileName = 'profile.css';
            const profileJsFileName = 'profile.js';
            const writeHeadParameters = [200, { 'Content-Type': 'text/html; charset=utf-8' }];

            // Serve profile.html
            serveFile(res, 1, writeHeadParameters, profileHtmlPath)//, profileCssFileName, profileJsFileName);

            // Connect to database

            // Do user account authentication to ensure they have access to see report (if they are an artist and the report is for their music)/ playlist (if hidden but they are the owner), etc.

            // If no access, close connection and output appropriate message to them

            // Else, do a request.query('SELECT thing_1, thing_2, etc., FROM table_1, table_2, WHERE conditions', ...) to pull rows of data. Next, find out how to modify page to showcase data pulled (may need to use fs object)

            return; // Return to avoid further processing for this route
        }


        // GETs added by Axel on Nov 18 2023 at night
        else if (fileName === '/profileGetCurrentUser') {

            const userCookie = req.headers.cookie;

            var user_id = getIdFromCookie(userCookie);
            var current_cougar_id;
            if (!(user_id == undefined)){
                current_cougar_id = user_id;
            

                // Connect to the database
                sql.connect(dbConfig, (err) => {
                    // Database connection error handler
                    if (err) {
                        handleDatabaseError(res, err);
                        return;                    
                    }

                    const request = new sql.Request();
                    
                    var query = `
                    SELECT [Username]
                    FROM [MusicLibrary].[User]
                    WHERE [MusicLibrary].[User].[Cougar_ID] = ${current_cougar_id} 
                    AND [MusicLibrary].[User].[Marked_For_Deletion] = 0`;

                    // Process query result and store it to use as a response
                    request.query(query, (err, result) =>  {
                        if (err) {                                                   // Database query error handler
                            console.error('Database query error:', err);
                            sql.close();
                            res.writeHead(500, { 'Content-Type': 'text/plain' });
                            res.end('Database query error');
                            return;
                        }
                        // Collects rows of data and stores it as JSON to send back to the client
                        console.log(result);
                        var rows;
                        if (result.recordset[0]){
                            rows = result.recordset;
                        }
                        else {
                            rows = {};
                        }
                        console.log(rows);
                        const jsonData = JSON.stringify(rows);
                        res.writeHead(200, {
                            'Content-Type': 'application/json',
                            /*'Content-Length': Buffer.byteLength(jsonData, 'utf8'),*/ //remove row below if needed
                            "Access-Control-Allow-Origin": "*"
                        });

                        console.log(jsonData);
                        res.end(jsonData);
                    })
                })
            }
            else {
                console.log('Error: Axel code could not get user id from the cookie')
            }

            return; // Return to avoid further processing for this route

        }


        else if (fileName === '/profileGetCurrentUserCougarID') {

            const userCookie = req.headers.cookie;

            var user_id = getIdFromCookie(userCookie);
            var userID;
            if (!(user_id == undefined)){
                userID = user_id;
            }
            else {
                console.log('Axel code could not get the user id from the cookie')
                return;
            }

            var data = {current_cougar_id: userID}

            console.log(data)
            const jsonData = JSON.stringify(data);
            res.writeHead(200, {
                'Content-Type': 'application/json',
                /*'Content-Length': Buffer.byteLength(jsonData, 'utf8'),*/ //remove row below if needed
                "Access-Control-Allow-Origin": "*"
            });

            console.log(jsonData);
            res.end(jsonData);

            return; // Return to avoid further processing for this route

        }

        // Raphael: I have added this route "/login/admin.html", however, I believe the routing you already had 
        // above is preferred since from what I saw you're doing user authentication there (which I do not have in
        // the "/login/admin.html" route below) and you're serving the file too. If all is good with the route you
        // had above for the admin page, feel free to delete this block below:
        // else if (fileName === '/login/admin.html') {
        //  // some_code
        //  // some_code
        //  }
        else if (fileName === '/login/admin.html') {
            const adminPageHtmlPath = path.join(__dirname, '..', 'client', 'admin.html');
            const adminCssFileName = 'admin.css';
            const adminJsFileName = 'admin.js';
            const writeHeadParameters = [200, { 'Content-Type': 'text/html; charset=utf-8' }];

            // Serve admin.html
            serveFile(res, 1, writeHeadParameters, adminPageHtmlPath)//, adminCssFileName, adminJsFileName);
            
            // Connect to database

            // Do user account authentication to ensure they have access to see report (if they are an artist and the report is for their music)/ playlist (if hidden but they are the owner), etc.

            // If no access, close connection and output appropriate message to them

            // Else, do a request.query('SELECT thing_1, thing_2, etc., FROM table_1, table_2, WHERE conditions', ...) to pull rows of data. Next, find out how to modify page to showcase data pulled (may need to use fs object)

            return; // Return to avoid further processing for this route
        }

        else if (fileName === '/adminGetUsernames') {

            // Connect to the database
            sql.connect(dbConfig, (err) => {
                // Database connection error handler
                if (err) {
                    handleDatabaseError(res, err);
                    return;                    
                }

                const request = new sql.Request();

                var query = `
                SELECT [Cougar_ID], [Username], [Role_Name]
                FROM [MusicLibrary].[User], [MusicLibrary].[Roles] 
                WHERE [MusicLibrary].[User].[Marked_For_Deletion] = 0 
                AND [MusicLibrary].[User].[Role_ID] = [MusicLibrary].[Roles].[Role_ID]`;

                // Process query result and store it to use as a response
                request.query(query, (err, result) =>  {
                    if (err) {                                                   // Database query error handler
                        console.error('Database query error:', err);
                        sql.close();
                        res.writeHead(500, { 'Content-Type': 'text/plain' });
                        res.end('Database query error');
                        return;
                    }
                    // Collects rows of data and stores it as JSON to send back to the client
                    console.log(result);
                    const rows = result.recordset;
                    console.log(rows);
                    const jsonData = JSON.stringify(rows);
                    res.writeHead(200, {
                        'Content-Type': 'application/json',
                        'Content-Length': Buffer.byteLength(jsonData, 'utf8'), //remove row below if needed
                        "Access-Control-Allow-Origin": "*"
                    });

                    console.log(jsonData);
                    res.end(jsonData);
                })
            })

            return; // Return to avoid further processing for this route
        }

        else if (req.method === 'GET') {
            let pool
            try {
                pool = await sql.connect(dbConfig);  // Use the existing variable
                const result1 = await pool.request().query("SELECT Top 6 Title,Audio_Data FROM [MusicLibrary].[Song];");
                const result2 = await pool.request().query("SELECT TOP 6 Username FROM [MusicLibrary].[User] WHERE Role_ID = 1;");
                const result3 = await pool.request().query("SELECT Username FROM [MusicLibrary].[User] WHERE Role_ID = 3;");
                const result4 = await pool.request().query("SELECT Top 6 Audio_Data FROM [MusicLibrary].[Song];");
    
                res.end(JSON.stringify({
                    data1: result1.recordset,
                    data2: result2.recordset,
                    data3: result3.recordset,
                    data4: result4.recordset
                }));
            } catch (error) {
                console.error('Error fetching usernames:', error);
                return [];
            } finally {
                if (pool) {
                    pool.close();
                }
            }
        }

        // No file exists for this GET method
        else {
            res.writeHead(404, {'Content-Type': 'text/plain'});
            res.end('Not Found');
        }

        // else if (etc.)
    }
})

const PORT = process.env.PORT || 8080;

server.listen(PORT, () => {                                                      // Server object listens on this port
  console.log('Server is listening on port ' + PORT);
});